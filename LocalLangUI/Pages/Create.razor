@page "/Create"

@inject ICategoryCollection dbCategories
@inject IExpressionCollection dbExpressions
@inject NavigationManager navManager

<h1>Make A Suggestion</h1>

<div>
    <div>
        <div>
            <button @onclick="ClosePage"></button>
        </div>
        <EditForm Model="newExpression_" OnValidSubmit="CreateExpression">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="expression-text">Expression</label>
                <div>Focus on the experssion you want to add.</div>
                <InputText id="expression-text" @bind-Value="newExpression_.Word" />
            </div>
            <div>
                <label for="category">Category</label>
                <div>Choose category.</div>
                <div>
                    @if (categories_ is not null)
                    {
                        <CustomInputRadioGroup id="category" @bind-Value="newExpression_.Category">
                            @foreach (var c in categories_)
                                {
                                <div>
                                    <InputRadio Value="@c.Id" id="@c.Id" />
                                    <label for="@c.Id">@c.Name</label>
                                </div>
                                }
                        </CustomInputRadioGroup>
                    }
                </div>
            </div>
            <div>
                <label for="translation">Translation</label>
                <div>Translate your expression.</div>
                <InputTextArea id="translation" @bind-Value="newExpression_.Translation" />
            </div>
            <div>
                <button type="submit">Suggest</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateExpressionModel newExpression_ = new();
    private IList<Category>? categories_;

    protected async override Task OnInitializedAsync()
    {
        categories_ = await dbCategories.GetAllAsync();
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task CreateExpression()
    {
        var category = await dbCategories.GetOrDefaultAsync(newExpression_.Category);
        var expression = new Expression(newExpression_.Word, newExpression_.Translation, category);
        await dbExpressions.Create(expression);

        newExpression_ = new();
        ClosePage();
    }
}
