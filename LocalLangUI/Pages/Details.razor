@page "/Details/{Id}"

@inject IExpressionCollection dbExpressions
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">@LabelResource.DetailsHeading</h1>

<div class="row justify-content-center">
    <div class="col-xl-8 col-lg-10 form-layout detail-form-layout">
        @if (expression_ is not null)
        {
            <div class="row expression-detail-row">
                <div class="col-11 expression-detail">
                    <div>
                        <div class="@GetLikeClass()" @onclick="Like">
                            <div class="text-uppercase">@GetLikeTopText()</div>
                            <span class="oi oi-caret-top expression-detail-like"></span>
                            <div class="text-uppercase">@GetLikeBottomText()</div>
                        </div>
                        <div class="expression-detail-date">
                            <div>@expression_.DateCreated.ToString(ConfigurationExtensions.DateFormat)</div>
                        </div>
                    </div>
                    <div class="expression-detail-text">
                        <div class="mb-2 expression-detail-word">@expression_?.Word</div>
                        <div class="mb-2 d-none d-md-block">@expression_?.Translation</div>
                        <div class="mb-2 expression-entry-text-category d-none d-md-block">@expression_?.Category.Name</div>
                    </div>
                </div>
                <div class="col-1">
                    <button class="btn" @onclick="ClosePage">🗙</button>
                </div>
            </div>
            <div class="row d-block d-md-none">
                <div class="expression-detail-text">
                    <div class="mb-2">@expression_?.Translation</div>
                    <div class="mb-2 expression-entry-text-category">@expression_?.Category.Name</div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    [NotNull]
    public string? Id { get; set; }

    private Expression? expression_;

    protected async override Task OnInitializedAsync()
    {
        expression_ = await dbExpressions.GetAsync(Id);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async Task Like()
    {
        if (expression_ is not null)
        {
            expression_.Likes++;
            await dbExpressions.UpdateAsync(expression_);
        }
    }

    private string GetLikeTopText()
    {
        return expression_?.Likes > 0 ? expression_.Likes.ToString() : LabelResource.LikeTopText;
    }

    private string GetLikeBottomText()
    {
        if (expression_ is null || expression_.Likes < 1)
        {
            return string.Empty;
        }

        return (expression_.Likes % 100, expression_.Likes % 10) switch
        {
            (1, _) => LabelResource.LikeBottomText,
            ( >= 2 and <= 4, _) => LabelResource.LikeBottomTextPlural2to4,
            ( > 4 and <= 20, _) => LabelResource.LikeBottomTextPlural,
            (_, 1) => LabelResource.LikeBottomText,
            (_, >= 2 and <= 4) => LabelResource.LikeBottomTextPlural2to4,
            _ => LabelResource.LikeBottomTextPlural,
        };
    }

    private string GetLikeClass()
    {
        return expression_?.Likes > 0 ? "expression-detail-liked" : "expression-detail-no-likes";
    }
}
