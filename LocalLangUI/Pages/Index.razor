@page "/"

@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject IExpressionData expressionData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading text-uppercase mb-4">Local Language Expressions</h1>

<div class="expression-container">
    <button @onclick="LoadCreatePage" class="suggest-btn btn btn-outline-dark btn-lg text-uppercase">Suggest</button>
</div>

<div class="row">
    <div class="expressions-count col-md-4 text-dark mt-2">@expressions?.Count Expressions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
        <button class="btn btn-order @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input type="text" placeholder="Search" aria-label="Search box" class="form-control rounded-control" 
               @oninput="((text) => OnSearchInput((string)text.Value))" />
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (expressions is not null)
        {
            <Virtualize Items="@expressions" Context="e" OverscanCount="10">
                <div class="expression-entry">
                    <div class="@GetVoteClass(e)">
                        <div class="text-uppercase">@GetUpvoteTopText(e)</div>
                        <span class="oi oi-caret-top" style="font-size: 3rem"></span>
                        <div class="text-uppercase">@GetUpvoteBottomText(e)</div>
                    </div>
                    <div class="expression-entry-text">
                        <div class="expression-entry-text-title" @onclick="() => OpenDetails(e)">
                            @e.Expression
                        </div>
                        <div>
                            <div class="expression-entry-text-category" @onclick="() => OpenDetails(e)">@e.Category?.CategoryName</div>
                        </div>
                    </div>
                    <div class="expression-entry-status @GetExpressionStatusClass(e)">
                        <div class="expression-entry-status-text">
                            @e.Status?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if (categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase" fw-bold>Category</span>
                <div class="@GetSelectedCategory()" @onclick="() => OnCategoryClick()">All</div>
                @foreach (var c in categories)
                {
                    <div class="@GetSelectedCategory(c.CategoryName)" @onclick="() => OnCategoryClick(c.CategoryName)">@c.CategoryName</div>
                }
            </div>
        }
        @if (statuses is not null)
        {
            <div class="statuses">
                <span class="text-uppercase fw-bold">Status</span>
                <div class="@GetSelectedStatus()" @onclick="() => OnStatusClick()">All</div>
                @foreach (var s in statuses)
                {
                    <div class="@GetSelectedStatus(s.StatusName)" @onclick="() => OnStatusClick(s.StatusName)">@s.StatusName</div>
                }
            </div>
        }
    </div>
</div>

@code {
    private IList<CategoryModel> categories;
    private IList<StatusModel> statuses;
    private IList<ExpressionModel> expressions;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    private bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetCategoriesAsync();
        statuses = await statusData.GetStatusesAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterExpressions();
            StateHasChanged();
        }
    }

    private void LoadCreatePage()
    {
        navManager.NavigateTo("/Create");
    }

    private string SortedByNewClass(bool isNew)
    {
        return isNew == isSortedByNew ? "sort-selected" : "";
    }

    private string GetVoteClass(ExpressionModel expression)
    {
        if (expression.UserVotes is null || expression.UserVotes.Count == 0)
        {
            return "expression-entry-no-votes";
        }
        else
        {
            return "expression-entry-voted";
        }
    }

    private string GetExpressionStatusClass(ExpressionModel expression)
    {
        if (expression is null || expression.Status is null)
        {
            return "expression-entry-status-none";
        }

        var result = expression.Status.StatusName switch
        {
            "Completed" => "expression-entry-status-completed",
            "Watching" => "expression-entry-status-watching",
            "Upcoming" => "expression-entry-status-upcoming",
            "Dismissed" => "expression-entry-status-dismissed",
            _ => "expression-entry-status-none",
        };

        return result;
    }

    private string GetSelectedCategory(string category = "All")
    {
        if (category == selectedCategory)
        {
            return "selected-category";
        }
        else
        {
            return "";
        }
    }

    private string GetSelectedStatus(string status = "All")
    {
        if (status == selectedStatus)
        {
            return "selected-status";
        }
        else
        {
            return "";
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterExpressions()
    {
        var result = await expressionData.GetApprovedExpressionsAsync();

        if (selectedCategory != "All")
        {
            result = result.Where(e => e.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            result = result.Where(e => e.Status?.StatusName == selectedStatus).ToList();
        }

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            result = result.Where(e => e.Expression.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                                       e.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase))
                           .ToList();
        }

        if (isSortedByNew)
        {
            result = result.OrderByDescending(e => e.DateCreated).ToList();
        }
        else
        {
            result = result.OrderByDescending(e => e.UserVotes.Count).ThenByDescending(e => e.DateCreated).ToList();
        }

        expressions = result;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterExpressions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterExpressions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterExpressions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterExpressions();
    }

    private string GetUpvoteTopText(ExpressionModel expression)
    {
        if (expression.UserVotes?.Count > 0)
        {
            return expression.UserVotes.Count.ToString("00");
        }
        else
        {
            return "Click To";
        }
    }

    private string GetUpvoteBottomText(ExpressionModel expression)
    {
        if (expression.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(ExpressionModel expression)
    {
        navManager.NavigateTo($"/Details/{expression.Id}");
    }
}