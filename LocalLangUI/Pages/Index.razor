@page "/"

@inject ICategoryCollection dbCategory
@inject IExpressionCollection dbExpression
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading text-uppercase mb-4">Local Language Expressions</h1>

<div class="expression-container">
    <button @onclick="OpenCreate" class="suggest-btn btn btn-outline-dark btn-lg text-uppercase">Suggest</button>
</div>

<div class="row">
    <div class="expression-count col-md-4 text-dark mt-2">@expressions_.Count Expressions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @GetSortClass(SortType.Alphabet)" @onclick="() => OnSort(SortType.Alphabet)">Abc</button>
        <button class="btn btn-order @GetSortClass(SortType.New)" @onclick="() => OnSort(SortType.New)">New</button>
        <button class="btn btn-order @GetSortClass(SortType.Popular)" @onclick="() => OnSort(SortType.Popular)">Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input type="text" placeholder="Search" aria-label="Search box" class="form-control rounded-control" 
               @oninput="(text) => OnSearchInput((string)text.Value)" />
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        <Virtualize Items="@expressions_" Context="e" OverscanCount="10">
            <div class="expression-entry">
                <div class="@GetLikeClass(e)">
                    <div class="text-uppercase">@GetLikeTopText(e)</div>
                    <span class="oi oi-caret-top" style="font-size: 3rem"></span>
                    <div class="text-uppercase">@GetLikeBottomText(e)</div>
                </div>
                <div class="expression-entry-text">
                    <div class="expression-entry-text-title" @onclick="() => OpenDetails(e)">
                        @e.Word
                    </div>
                    <div>
                        <div class="expression-entry-text-category" @onclick="() => OpenDetails(e)">@e.Category.Name</div>
                    </div>
                </div>
            </div>
        </Virtualize>
    </div>
    <div class="col-md-4 col-xl-3">
        <div class="categories">
            <span class="text-uppercase" fw-bold>Category</span>
            <div class="@GetSelectedCategoryClass()" @onclick="() => OnCategoryClick()">All</div>
            @foreach (var c in categories_)
            {
                <div class="@GetSelectedCategoryClass(c.Name)" @onclick="() => OnCategoryClick(c.Name)">@c.Name</div>
            }
        </div>
    </div>
</div>

@code {
    private const string AllCategory = "All";

    private IList<Category> categories_;
    private IList<Expression> expressions_;

    private string category_ = AllCategory;
    private string searchText_ = string.Empty;
    private SortType sortType_ = SortType.Alphabet;

    #region Initialization

    protected async override Task OnInitializedAsync()
    {
        categories_ = await dbCategory.GetAllAsync();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterExpressions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(category_));
        category_ = stringResults.Success ? stringResults.Value : AllCategory;

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText_));
        searchText_ = stringResults.Success ? stringResults.Value : string.Empty;

        var sortResults = await sessionStorage.GetAsync<SortType>(nameof(sortType_));
        sortType_ = sortResults.Success ? sortResults.Value : SortType.Alphabet;
    }

    private async Task FilterExpressions()
    {
        IEnumerable<Expression> result = await dbExpression.GetAllAsync();

        if (category_ != AllCategory)
        {
            result = result.Where(e => e.Category.Name == category_);
        }

        if (!string.IsNullOrWhiteSpace(searchText_))
        {
            result = result.Where(e => e.Word.Contains(searchText_, StringComparison.InvariantCultureIgnoreCase) ||
                                       e.Translation.Contains(searchText_, StringComparison.InvariantCultureIgnoreCase));
        }

        result = sortType_ switch
        {
            SortType.Alphabet => result.OrderBy(e => e.Word),
            SortType.New => result.OrderByDescending(e => e.DateCreated),
            SortType.Popular => result.OrderBy(e => e.Likes),
            _ => result
        };

        expressions_ = result.ToList();

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(category_), category_);
        await sessionStorage.SetAsync(nameof(searchText_), searchText_);
        await sessionStorage.SetAsync(nameof(sortType_), sortType_);
    }

    #endregion

    #region Navigation

    private void OpenCreate()
    {
        navManager.NavigateTo("/Create");
    }

    private void OpenDetails(Expression expression)
    {
        navManager.NavigateTo($"/Details/{expression.Id}");
    }

    #endregion

    #region Events

    private async Task OnSort(SortType sorting)
    {
        sortType_ = sorting;
        await FilterExpressions();
    }

    private async Task OnSearchInput(string searchText)
    {
        searchText_ = searchText;
        await FilterExpressions();
    }

    private async Task OnCategoryClick(string category = AllCategory)
    {
        category_ = category;
        await FilterExpressions();
    }

    #endregion

    #region Markup

    private string GetLikeTopText(Expression expression)
    {
        return expression.Likes > 0 ? expression.Likes.ToString("00") : "Click To";
    }

    private string GetLikeBottomText(Expression expression)
    {
        return expression.Likes > 1 ? "Likes" : "Like";
    }

    private string GetSortClass(SortType sortType)
    {
        return sortType switch
        {
            SortType.Alphabet => "sort-selected",
            _ => string.Empty
        };
    }

    private string GetLikeClass(Expression expression)
    {
        return expression.Likes > 0 ? "expression-entry-liked" : "expression-entry-no-likes";
    }

    private string GetSelectedCategoryClass(string category = AllCategory)
    {
        return category == category_ ? "selected-category" : string.Empty;
    }

    #endregion

    #region Sort Type Class

    private enum SortType
    {
        Alphabet,
        New,
        Popular
    }

    #endregion
}